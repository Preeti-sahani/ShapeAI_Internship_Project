# -*- coding: utf-8 -*-
"""Github_analysis .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Ug98gjFM7pUpeWgGz3kFUUAiyv8_LKN

# **<div align="center">  GitHub Analysis  </div>**

<div style="text-align: center;">
<img src="https://raw.githubusercontent.com/Potential17/Potential17/master/github-logo-octocat-.gif" width="250" height="250">
</div>

#**Imporing Libraries**
"""

import numpy as np 
import pandas as pd 
import plotly.graph_objects as go
import plotly.express as px
import seaborn as sns
import seaborn as sb
import matplotlib.pyplot as plt
import ast

"""#**Exploratory data analysis (EDA)**
#**1. Understaing Dataset**
**1.1 Importing Data**
"""

Github_df = pd.read_csv("/content/Github_data.csv")
Github_df.head()

Github_df.tail()

"""**1.2. Shape of dataset**"""

Github_df.shape

"""**1.3. Info()**"""

Github_df.info()

"""**1.4. Dtype**"""

Github_df_max = Github_df['star'].str.contains('k').all()
Github_df_max

Github_df['star']=Github_df['star'].str.replace('k','').astype(float)

"""**1.5. Describe**"""

Github_df['star'].describe()

"""**1.6. Converting number with comma numerical.**"""

Numerical_columns = ["star","fork","watch","issue","pull_requests","projects","commits","branches","packages","releases","contributers"]
Github_df.at[700, 'issue'] = str(5000)

Github_df["issue"] = Github_df["issue"].apply(lambda x: x.replace(',', '') if ',' in x else x).astype(float)
Github_df["pull_requests"] = Github_df["pull_requests"].apply(lambda x: x.replace(',', '') if ',' in x else x).astype(float)
Github_df["commits"] = Github_df["commits"].apply(lambda x: x.replace(',', '') if ',' in x else x).astype(float)
Github_df["branches"] = Github_df["branches"].apply(lambda x: x.replace(',', '') if ',' in x else x).astype(float)
Github_df["contributers"] = Github_df["contributers"].apply(lambda x: x.replace(',', '') if ',' in x else x).astype(float)

"""**Column Star, Fork, Watch conatains number like(1.2K) format is convert into (1200) format.**

"""

Github_df['fork'] = Github_df['fork'].apply(lambda x: float(x.replace('k',''))*1000 if 'k' in x else x)
Github_df['watch'] = Github_df['watch'].apply(lambda x: float(x.replace('k',''))*1000 if 'k' in x else x)

Github_df.head()

Github_df.tail()

"""**1.7. Handling Missing Values**"""

# import package and its set of stopwords
from wordcloud import WordCloud, STOPWORDS
from PIL import Image

Github_df.isnull().sum()

"""**Visualizing the null values for each attribute**"""

import missingno as msno

msno.bar(Github_df)
plt.show()

"""
**1.8 filling a null values using fillna()**

**ffill means forwadrd fill (non-null values forward)**"""

Github_df["projects"].fillna(method='ffill', inplace = True)
Github_df["discription_url"].fillna(method='ffill', inplace = True)
Github_df["discription_text"].fillna(method='ffill', inplace = True)

#Checking for any null values 
Github_df.isnull().sum()

"""**Processing on column topic_tag**"""

unique_tags = []
Github_df['topic_tag'].apply(lambda x: unique_tags.append(ast.literal_eval(x)))

all_tag = np.array([item for sublist in unique_tags for item in sublist])
unique, counts = np.unique(all_tag, return_counts=True)
print("Total number of tags in 1500 repository : ",len(all_tag))
print("Total number of unique tags in 1500 repository : ",len(unique))

tag_df = pd.DataFrame({"unique":unique,"counts":counts})
tag_df = tag_df.sort_values(['counts'],ascending=[False])

fig = px.bar(tag_df[:100],x="unique",y="counts",color='counts')
fig.show()

"""#**2. Repository Distributions Analysis**
**Analysis of repositories based on popularity as:**

**Star** - When a user likes your repo or they want to show some appreciation, they Star it.

**Watch** - When a user wants to be notified of all the activities in a repo, then they Watch it.

**Fork** - When a user wants a copy of the repo or make any contributions, they tend to Fork it.

**2.1. Topic wise project distribution.**
"""

X = sns.catplot(x = "projects", y="topic", data = Github_df, height=10, kind="bar")
X.set_xlabels("projects")
X.set_ylabels("topic")
X.set_titles("Topicwise Projects")

"""**2.2. Repository Fork distribution:**"""

Github_df['fork'] = Github_df['fork'].astype(float)
fork_topicwise = Github_df.groupby('topic').sum()['fork']
fig = px.bar(fork_topicwise, x = fork_topicwise.index, y = "fork", color = fork_topicwise.index)
fig.show()

"""**We can see above Android-studio, Open-CV, sensor & Raspberry pi tags have  minimum or less forks.**

**2.3 Repository star distribution :**
"""

Github_df['star'] = Github_df['star'].astype(float)
star_topicwise = Github_df.groupby('topic').sum()['star']
fig = px.bar(star_topicwise,x=star_topicwise.index,y="star",color=star_topicwise.index)
fig.show()

"""We can see here Arduino, Raspberry pi & sensor topic has most stared repository (total 30k+).

Also we know that machine-learning is most usable tags rather then machine-learning repository are not stared as much as java-script and java.

Data-Science, Computer-Vision, awesome, machine-Learning are those topics which accumulated sum are very low.

Data-science,computer-vision is most hot topic these days but data-science repositerys are not as much stared compared to other topics.

**2.4 Repository watch distribution:**
"""

Github_df['watch'] = Github_df['watch'].astype(float)
watch_topicwise = Github_df.groupby('topic').sum()['watch']
fig = px.bar(watch_topicwise,x = watch_topicwise.index, y ="watch", color = watch_topicwise.index)
fig.show()

"""**We can see same similarity in topic-wise here like star and fork.**

**2.5 Issue Distribution**
"""

Github_df['issue'] = Github_df['issue']
issue_topicwise = Github_df.groupby('topic').sum()['issue']
fig = px.pie(issue_topicwise, values ='issue', names = issue_topicwise.index, title ='Issue Distribution topic wise')
fig.show()

"""Javascript has most of the issues with 27% as compare to others tags.

**2.6 Commit Distribution :**
"""

commit_topicwise = Github_df.groupby('topic').sum()['commits']
fig = px.pie(commit_topicwise, values ='commits', names = commit_topicwise.index, title ='Commit Distribution topic wise')
fig.show()

"""Defenetly Raspberry-pi topic have less star and forks but it wins in commits with almost 24%.

**2.7 Pull requests Distribution :**
"""

Github_df['pull_requests'] = Github_df['pull_requests'].astype(float)
pull_req_topicwise = Github_df.groupby('topic').sum()['pull_requests']
fig = px.pie(pull_req_topicwise, values ='pull_requests', names = pull_req_topicwise.index, title ='Pull requests Distribution topic wise')
fig.show()

"""**Here javascript has more pull requests with 25% of over all chart, this means that users are much more interste in javascript as compare to other programming tags. 
After that users make requests on machine larning with 22% of a chart.**

**2.8 Contributors Distribution :**
"""

contributers_topicwise = Github_df.groupby('topic').sum()['contributers']
fig = go.Figure(data=[go.Pie(labels=contributers_topicwise.index, values=contributers_topicwise.values, hole=.3)])
fig.show()

"""**Java-Script again win the game Data-Science and c++ topics are came forward. they are not at 2nd and 3rd place in star and fork repository.**

**2.9 License distribution :**
"""

License_distribution = Github_df["License"].apply(lambda x: x if'\n' not in x else None).value_counts()
fig = px.bar(y = License_distribution.values, x = License_distribution.index)
fig.show()

"""#**3. Correlations**

**3.1. All numeric columns correlation:**
"""

Numerical_columns = ["star","fork","watch","issue","pull_requests","projects","commits","branches","packages","releases","contributers"]
plt.figure(figsize=(10,10))
plt.title('correlation between star and fork', y=1.05, size=15)
sns.heatmap(Github_df[Numerical_columns].corr(),linewidths=0.1,vmax=1.0, square=True, 
            cmap='RdGy', linecolor='black', annot=True)

"""**There are many columns are not correlated.**

**3.2 Relationship between Star, Fork and Watch**
"""

colormap = plt.cm.magma
plt.figure(figsize=(5,5))
plt.title('correlation between star and fork', y=1.05, size=15)
sns.heatmap(Github_df[['star','fork','watch']].corr(),linewidths=0.1,vmax=1.0, square=True, cmap='PuBu', linecolor='black', annot=True)

"""star and watch are more correlatd (0.9)
star and fork is less correlated compare to other two,

**(Star & watch) > (Fork & watch) > (star > fork)**

**3.3 Correlation between the contribution columns**
"""

corr_col_df = Github_df.dropna(axis=0, subset = ['issue', 'pull_requests', 'commits', 'branches', 'contributers'])[['issue','pull_requests','commits', 'branches', 'contributers']]
corr_col_df.corr

colormap = plt.cm.magma
plt.figure(figsize=(6,6))

sns.heatmap(corr_col_df.corr(), linewidths=0.1, vmax=1.0, square=True, linecolor='black', annot=True, cmap='BuGn');

"""Number of Commits is not dependent on either issue, pull requests or contributors. There is a Moderate Positive Relationship between Issues and Pull Requests.

#**4. Top 10 Repository Analysis Topicwiseb:**

**4.1 Stars of top 10 repositories**
"""

github_group = Github_df.groupby('topic')
num_of_top_repository = 10
fig = go.Figure()
for name, group in github_group:
    
    fig.add_trace(go.Bar(
    x=list(range(1,num_of_top_repository+1)),
    y=group["star"].values[:num_of_top_repository+1],
    name=name,
    ))
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

"""**Java-script repository havs more stars then other repository in tpo 10 repositories.**

**4.2 Fork**
"""

github_group = Github_df.groupby('topic')
num_of_top_repository = 10
fig = go.Figure()
for name, group in github_group:
    
    fig.add_trace(go.Bar(
    x=list(range(1,num_of_top_repository+1)),
    y=group["fork"].values[:num_of_top_repository+1],
    name=name,
    ))
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

"""**Machine-learning repositories are more forked then java-scriped repositories rether then java-script repositories are more stared.**

**4.3 Watch**
"""

github_group = Github_df.groupby('topic')
num_of_top_repository = 10
fig = go.Figure()
for name, group in github_group:
    
    fig.add_trace(go.Bar(
    x=list(range(1,num_of_top_repository+1)),
    y=group["watch"].values[:num_of_top_repository+1],
    name=name,
    ))
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

"""**4.4 Similarlly checking for contributors**"""

github_group = Github_df.groupby('topic')
num_of_top_repository = 10
fig = go.Figure()
for name, group in github_group:
    
    fig.add_trace(go.Bar(
    x=list(range(1,num_of_top_repository+1)),
    y=group["contributers"].values[:num_of_top_repository+1],
    name=name,
    ))
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

"""**Here we can see some different senerio
more stared repositories have less contributers**

**Inference :**

Among the top 10 most starred, watched, and forked repositories, Javascript is the most watched as well as forked repository. If a user is watching a repository, then they are mostly likely to fork it.

Microsoft and Google tend to be users with more popular repositories.

There is no actual relatonship between contribution activities (Issues, Pull requests, Commits).

Most used tags are Machine Learning, Python,JavaScript, Java.
"""